#!/usr/bin/env node
var upbeat       = require('../lib/index');
var EventEmitter = require('events').EventEmitter;

if (process.argv.length != 6 && process.argv.length != 4) {
  console.log("Tempo: 0.1.14");
  console.log("USAGE: tempo <clients>x<requests> <service> <actionIdx> <config file>");
  console.log("   OR: tempo <clients>x<requests> <action config file>");
  console.log("EXAMPLE: tempo 3x5 google 0 ./examples/google.yml");
  console.log("     OR: tempo 3x5 ./examples/action.yml");
  console.log("Arguments:");
  console.log("  clients:     number of concurrent clients to use");
  console.log("  requests:    number of serial requests to make per client");
  console.log("  service:     upbeat service");
  console.log("  actionIdx:   nth action for service (zero based)");
  console.log("  config file: yaml config file to use");
  process.exit(0);
}

var argv = process.argv;
argv.shift();
argv.shift();

var file = argv.pop();

var counts   = argv.shift().split('x');
var clients  = parseInt(counts[0]);
var requests = parseInt(counts[1]);

if (! file.match(/^\//)) file = process.cwd() + '/' + file;

var Runner = function () { };
Runner.prototype = new EventEmitter;
var runner = new Runner();

if (argv.length == 2) {
  console.log(argv);
  var server = new upbeat.Server(file);
  var action = server.getAction(argv.shift(), parseInt(argv.shift()));
  server.benchmark(action, requests, clients, runner, function (meta) {
    delete meta['action'];
    console.log(JSON.stringify(meta));
    process.exit(0);
  });
} 

else if (argv.length == 0) {
  var server = new upbeat.Server({});
  var config = require(file)[0];
  var action = new Action(config, { "name": "tempo" });

  server.benchmark(action, requests, clients, runner, function (meta) {
    delete meta['action'];
    console.log(JSON.stringify(meta));
    process.exit(0);
  });
}





process.on('SIGINT', function () { runner.emit('end'); });
